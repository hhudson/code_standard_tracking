prompt --application/shared_components/plugins/item_type/com_oracle_apex_flex_field
begin
--   Manifest
--     PLUGIN: COM.ORACLE.APEX.FLEX_FIELD
--   Manifest End
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2021.04.15'
,p_release=>'21.1.7'
,p_default_workspace_id=>9690978936188613
,p_default_application_id=>130
,p_default_id_offset=>2953977059365452042
,p_default_owner=>'ILA'
);
wwv_flow_api.create_plugin(
 p_id=>wwv_flow_api.id(4402493816225680190)
,p_plugin_type=>'ITEM TYPE'
,p_name=>'COM.ORACLE.APEX.FLEX_FIELD'
,p_display_name=>'Flex Field'
,p_supported_ui_types=>'DESKTOP:JQM_SMARTPHONE'
,p_supported_component_types=>'APEX_APPLICATION_PAGE_ITEMS'
,p_image_prefix => nvl(wwv_flow_application_install.get_static_plugin_file_prefix('ITEM TYPE','COM.ORACLE.APEX.FLEX_FIELD'),'')
,p_plsql_code=>wwv_flow_string.join(wwv_flow_t_varchar2(
'type t_flex_config is record (',
'    is_active         boolean,',
'    form_label_text   varchar2(255),',
'    is_required       boolean,',
'    display_as        varchar2(255),',
'    flexible_column   varchar2(128),',
'    lov_sql_query     varchar2(32767),',
'    width             number,',
'    max_width         number,',
'    height            number,',
'    label_template_id number,',
'    help_text         varchar2(4000),',
'    label_alignment   varchar2(30),',
'    format_mask       varchar2(30),',
'    default_value     varchar2(4000),',
'    rpt_hdr_alignment varchar2(30)',
'    );',
'',
'--===============================================================================',
'-- Reads the config of a flex field.',
'--===============================================================================',
'function get_flex_config (',
'    p_item   in apex_plugin.t_page_item,',
'    p_plugin in apex_plugin.t_plugin )',
'    return t_flex_config',
'is',
'    -- Use named constants instead of the generic attribute variables',
'    c_config_table constant varchar2(30) := p_plugin.attribute_01;',
'    --',
'    l_flex_table     varchar2(255);',
'    l_flex_column    varchar2(255);',
'    l_is_active_yn   varchar2(1) := ''N'';',
'    l_is_required_yn varchar2(1);',
'    l_flex_config    t_flex_config;',
'begin-- Get the information which flex table and column is processed',
'    begin',
'        select',
'               p.process_source,',
'               i.item_source',
'          into l_flex_table,',
'               l_flex_column',
'          from apex_application_page_proc p,',
'               apex_application_page_items i',
'         where p.application_id    = apex_application.g_flow_id',
'           and p.page_id           = apex_application.g_flow_step_id',
'           and p.process_type_code = ''DML_FETCH_ROW''',
'           and i.application_id    = apex_application.g_flow_id',
'           and i.page_id           = apex_application.g_flow_step_id',
'           and i.item_id           = p_item.id',
'           and i.item_source_type  = ''Database Column'';',
'    exception',
'        when no_data_found then',
'            l_flex_table  := null;',
'            l_flex_column := null;',
'    end;',
'',
'    --',
'    -- Only do the following if we have a flex table and flex column value',
'    if l_flex_table is not null and l_flex_column is not null then',
'        --',
'        -- Get the table name out of the "DML Fetch" process source. The format is',
'        -- F|#OWNER#:DEMO_ORDERS:P29_ORDER_ID:ORDER_ID',
'        l_flex_table := substr(l_flex_table, 11);',
'        l_flex_table := substr(l_flex_table, 1, instr(l_flex_table, '':'') -1);',
'        --',
'        -- Read the flex table configuration',
'        begin',
'            execute immediate ''select /*+ result_cache */ '' ||',
'                              ''active_yn, form_label_text, is_required_yn, display_as, lov_sql_query, width, '' ||',
'                              ''max_width, height, label_template_id, flexible_column, help_text, '' ||',
'                              ''label_alignment, format_mask, default_value, rpt_hdr_alignment'' ||',
'                              ''  from '' || sys.dbms_assert.enquote_name(c_config_table) ||',
'                              '' where flexible_table  = :p_flex_table'' ||',
'                              ''   and flexible_column = :p_flex_column''',
'                         into l_is_active_yn,',
'                              l_flex_config.form_label_text,',
'                              l_is_required_yn,',
'                              l_flex_config.display_as,',
'                              l_flex_config.lov_sql_query,',
'                              l_flex_config.width,',
'                              l_flex_config.max_width,',
'                              l_flex_config.height,',
'                              l_flex_config.label_template_id,',
'                              l_flex_config.flexible_column,',
'                              l_flex_config.help_text,',
'                              l_flex_config.label_alignment,',
'                              l_flex_config.format_mask,',
'                              l_flex_config.default_value,',
'                              l_flex_config.rpt_hdr_alignment',
'                        using l_flex_table, l_flex_column;',
'        exception when no_data_found then',
'            l_is_active_yn := ''N'';',
'        end;',
'    end if;',
'    --',
'    l_flex_config.is_active   := ( l_is_active_yn = ''Y'' );',
'    l_flex_config.is_required := ( l_is_required_yn = ''Y'' );',
'    --',
'    return l_flex_config;',
'    --',
'end get_flex_config;',
'',
'--===============================================================================',
'-- Renders a flex field based on the configuration in the flex field repository table.',
'--===============================================================================',
'function render (',
'    p_item                in apex_plugin.t_page_item,',
'    p_plugin              in apex_plugin.t_plugin,',
'    p_value               in varchar2,',
'    p_is_readonly         in boolean,',
'    p_is_printer_friendly in boolean )',
'    return apex_plugin.t_page_item_render_result',
'is',
'    l_name           varchar2(30);',
'    l_item           apex_plugin.t_page_item := p_item;',
'    l_result         apex_plugin.t_page_item_render_result;',
'    l_flex_config    t_flex_config;',
'    l_label_template varchar2(30);',
'    l_date_picker    varchar2(10000);',
'    l_label          varchar2(32767);',
'    l_label_col_span number := 3;',
'    l_help_text      varchar2(4000);',
'    l_format_mask    varchar2(30);',
'    function get_format_mask(',
'        p_item_id in     number,',
'        p_app_id  in     number,',
'        p_page_id in     number',
'    ) return varchar2',
'    is',
'        l_format_mask    varchar2(30);',
'    begin',
'        select',
'            format_mask',
'        into',
'            l_format_mask',
'        from',
'            apex_application_page_items',
'        where',
'            item_id = p_item_id',
'        and',
'            application_id = p_app_id',
'        and',
'            page_id = p_page_id;',
'        return l_format_mask;',
'    exception',
'        when no_data_found then',
'            l_format_mask := null;',
'    end get_format_mask;',
'    function get_help_text(',
'        p_item_id in     number,',
'        p_app_id  in     number',
'    ) return varchar2',
'    is',
'        l_help_text    varchar2(4000);',
'    begin',
'        select',
'            item_help_text',
'        into',
'            l_help_text',
'        from',
'            apex_application_page_items',
'        where',
'            item_id = p_item_id',
'        and',
'            application_id = p_app_id;',
'        return l_help_text;',
'    exception',
'        when no_data_found then',
'            l_help_text := null;',
'    end get_help_text;',
'begin',
'    l_flex_config := null;',
'    l_flex_config := get_flex_config (',
'                         p_item   => l_item,',
'                         p_plugin => p_plugin );',
'    --',
'    -- Don''t render the flex field if it''s not active',
'    if not l_flex_config.is_active then',
'        l_result.is_navigable := false;',
'        return l_result;',
'    end if;',
'    --',
'    -- Always assign the item''s required setting value to the flex field''s required setting value',
'    l_item.is_required := l_flex_config.is_required;',
'    --',
'    -- If a page item saves state, we have to call the get_input_name_for_page_item',
'    -- to render the internal hidden p_arg_names field. It will also return the',
'    -- HTML field name which we have to use when we render the HTML input field.',
'    l_name := apex_plugin.get_input_name_for_page_item(false);',
'    --',
'    case l_flex_config.display_as',
'        when ''TEXT''        then',
'            sys.htp.prn(',
'                ''<input type="text" name="'' || l_name || ''" '' ||',
'                ''size="'' || l_flex_config.width || ''" maxlength="'' || l_flex_config.max_width || ''"'' ||',
'                ''value="'' || apex_escape.html_attribute(nvl(p_value, l_flex_config.default_value))||''" '' ||',
'                apex_plugin_util.get_element_attributes (',
'                    p_item          => l_item,',
'                    p_default_class => ''text'' ) ||',
'                ''/>'');',
'',
'        when ''TEXTAREA''    then',
'            sys.htp.prn(',
'                ''<textarea name="'' || l_name || ''" '' ||',
'                ''cols="'' || l_flex_config.width || ''" rows="'' || l_flex_config.height || ''" maxlength="'' || l_flex_config.max_width || ''" wrap="virtual" '' ||',
'                apex_plugin_util.get_element_attributes (',
'                    p_item          => l_item,',
'                    p_default_class => ''textarea'' ) ||',
'                ''>'');',
'            apex_plugin_util.print_escaped_value(nvl(p_value, l_flex_config.default_value));',
'            sys.htp.prn(''</textarea>'');',
'',
'        when ''SELECT_LIST'' then',
'            wwv_flow_utilities.show_as_combobox (',
'                p_lov        => l_flex_config.lov_sql_query,',
'                p_null_text  => ''- select value -'',',
'                p_null_value => null,',
'                p_show_extra => ''NO'',',
'                p_value      => nvl(p_value, l_flex_config.default_value),',
'                p_name       => l_name,',
'                p_attributes => apex_plugin_util.get_element_attributes (',
'                                    p_item          => l_item,',
'                                    p_default_class => ''selectlist'' )',
'                );',
'',
'        when ''NUMBER''      then',
'            l_format_mask := get_format_mask(l_item.id, apex_application.g_flow_id, apex_application.g_flow_step_id);',
'            --',
'            -- Update the format mask of the page item',
'            if nvl(l_flex_config.format_mask,''xxx'') <> nvl(l_format_mask,''xxx'') then',
'                apex_app_builder_api.edit_page_item (',
'                    p_page_id             => apex_application.g_flow_step_id,',
'                    p_item_name           => p_item.name,',
'                    p_format_mask         => l_flex_config.format_mask);',
'            end if;',
'            sys.htp.prn(',
'                ''<input type="text" name="'' || l_name || ''" '' ||',
'                ''size="'' || l_flex_config.width || ''" maxlength="'' || l_flex_config.max_width || ''"'' ||',
'                ''value="'' || apex_escape.html_attribute(trim(nvl(p_value, l_flex_config.default_value))) || ''" '' ||',
'                apex_plugin_util.get_element_attributes (',
'                    p_item          => l_item,',
'                    p_default_class => ''number_field'' ) ||',
'                ''/>'');',
'',
'        when ''DATE''        then',
'            l_format_mask := get_format_mask(l_item.id, apex_application.g_flow_id, apex_application.g_flow_step_id);',
'            --',
'            -- Update the format mask of the page item',
'            if nvl(l_flex_config.format_mask,''xxx'') <> nvl(l_format_mask,''xxx'') then',
'                apex_app_builder_api.edit_page_item (',
'                    p_page_id             => apex_application.g_flow_step_id,',
'                    p_item_name           => p_item.name,',
'                    p_format_mask         => l_flex_config.format_mask);',
'            end if;',
'            l_date_picker := wwv_flow_utilities.get_date_picker (',
'                p_id                    => p_item.name,',
'                p_name                  => l_name,',
'                p_value                 => nvl(p_value, l_flex_config.default_value),',
'                p_date_format           => l_flex_config.format_mask,',
'                p_size                  => l_flex_config.width,',
'                p_max_length            => l_flex_config.max_width,',
'                p_attributes            => apex_plugin_util.get_element_attributes (',
'                                                p_item          => l_item,',
'                                                p_default_class => ''datepicker''',
'                                            )',
'            );',
'            sys.htp.prn(l_date_picker);',
'        else',
'            sys.htp.prn(''<!-- ERRROR IN FLEX FIELD PLUGIN: l_flex_config.display_as = "''||nvl(l_flex_config.display_as,''???'')||''" -->'');',
'    end case;',
'',
'    -- Read label template',
'    begin',
'        select /*+ result_cache */',
'            replace(',
'                replace(',
'                    before_label || l_flex_config.form_label_text || after_label,',
'                    ''#CURRENT_ITEM_NAME#'',',
'                    p_item.name),',
'                ''#LABEL_ID#'',p_item.name||''_LABEL''',
'            )',
'        into l_label',
'        from apex_application_temp_label',
'            -- $$$ make it NLS aware',
'        where application_id = apex_application.g_flow_id',
'            -- $$$ restrict to theme of current UI',
'            and label_template_id = l_flex_config.label_template_id;',
'        exception when no_data_found then',
'            l_label := '''';',
'    end;',
'    -- Deal with column span.',
'    -- This should always return a value, but use the loop construct just in case.',
'    for c1 in ( select nvl(pi.grid_label_column_span, tp.grid_default_label_col_span) grid_span',
'                from apex_application_pages pg,',
'                    apex_application_temp_page tp,',
'                    apex_application_page_items pi',
'                where pi.application_id= 7170',
'                    and tp.application_id = pg.application_id',
'                    and tp.template_name = pg.page_template',
'                    and pg.application_id = pi.application_id',
'                    and pg.page_id = pi.page_id',
'                    and pi.item_id = p_item.id ) loop',
'        l_label_col_span := c1.grid_span;',
'    end loop;',
'    l_label := replace(l_label, ''#LABEL_COLUMN_SPAN_NUMBER#'', to_char(l_label_col_span));',
'',
'    --',
'    -- Handle the help text.',
'    l_help_text := get_help_text(l_item.id, apex_application.g_flow_id);',
'    --',
'    -- Update the help text of the page item',
'    apex_app_builder_api.edit_page_item (',
'        p_page_id             => apex_application.g_flow_step_id,',
'        p_item_name           => p_item.name,',
'        p_item_label          => l_flex_config.form_label_text,',
'        p_help_text           => l_flex_config.help_text',
'    );',
'',
'    --',
'    -- Now that the item''s help text has been updated, ',
'    -- refer to it in the label''s help text',
'    l_label := replace(l_label, ''#CURRENT_ITEM_ID#'', p_item.id);',
'    --',
'    l_label := apex_plugin_util.replace_substitutions(',
'                   p_value  => l_label,',
'                   p_escape => false );',
'',
'    --',
'    -- Change the item label on the fly',
'    --',
'    apex_javascript.add_onload_code(p_code=>''$("label[for='' || p_item.name || '']").parent().replaceWith('' || replace(apex_javascript.add_value(l_label, false),''#VALUE_REQUIRED#'',apex_lang.message(''VALUE_REQUIRED'')) || '');'',',
'                                   p_key=>''flex_upd_''||p_item.name);',
'',
'    -- Tell APEX that this field is navigable',
'    l_result.is_navigable := true;',
'',
'    return l_result;',
'end render;',
'',
'--==============================================================================',
'-- Validate a flex field based on the configuration in the flex field repository table.',
'--==============================================================================',
'function validate (',
'    p_item   in apex_plugin.t_page_item,',
'    p_plugin in apex_plugin.t_plugin,',
'    p_value  in varchar2 )',
'    return apex_plugin.t_page_item_validation_result',
'is',
'    l_result      apex_plugin.t_page_item_validation_result;',
'    l_flex_config t_flex_config;',
'begin',
'    l_flex_config := get_flex_config (',
'                         p_item   => p_item,',
'                         p_plugin => p_plugin );',
'    --',
'    -- Don''t render the flex field if it''s not active',
'    if not l_flex_config.is_active then',
'        return l_result;',
'    end if;',
'    --',
'    if l_flex_config.is_required and p_value is null then',
'        l_result.message := l_flex_config.form_label_text || '' is required!'';',
'    end if;',
'    return l_result;',
'end validate;'))
,p_api_version=>1
,p_render_function=>'render'
,p_validation_function=>'validate'
,p_standard_attributes=>'VISIBLE:SESSION_STATE:SOURCE'
,p_substitute_attributes=>true
,p_subscribe_plugin_settings=>true
,p_help_text=>wwv_flow_string.join(wwv_flow_t_varchar2(
'<p>The Flex Field plug-in renders a flex field based on the configuration in the flex field repository table.</p>',
'<p>You can review how this item plug-in is utilized in P-Track and Customer Tracker.</p>'))
,p_version_identifier=>'5.0.1'
,p_about_url=>'http://apex.oracle.com/plugins'
);
wwv_flow_api.create_plugin_attribute(
 p_id=>wwv_flow_api.id(4296319869126265200)
,p_plugin_id=>wwv_flow_api.id(4402493816225680190)
,p_attribute_scope=>'APPLICATION'
,p_attribute_sequence=>1
,p_display_sequence=>10
,p_prompt=>'Flex Registry Table'
,p_attribute_type=>'TEXT'
,p_is_required=>true
,p_display_length=>30
,p_max_length=>30
,p_is_translatable=>false
,p_help_text=>'Enter the table name which holds the required flex field attributes.'
);
wwv_flow_api.component_end;
end;
/
